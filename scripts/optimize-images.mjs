import sharp from 'sharp';
import { readdir, stat, rename, unlink } from 'fs/promises';
import { join, resolve, basename } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = resolve(__filename, '..');
const publicDir = resolve(__dirname, '..', 'public');

const optimizationSettings = {
  // –î–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∂–∏–≤–æ—Ç–Ω—ã—Ö
  animals: {
    maxWidth: 400,
    maxHeight: 300,
    quality: 65
  },
  // –î–ª—è —Å–æ–±—ã—Ç–∏–π
  events: {
    maxWidth: 500,
    maxHeight: 300,
    quality: 70
  },
  // –î–ª—è —Ñ–æ–Ω–∞ –∏ –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  background: {
    maxWidth: 1200,
    maxHeight: 800,
    quality: 55
  },
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  default: {
    maxWidth: 600,
    maxHeight: 400,
    quality: 70
  }
};

function getOptimizationSettings(filePath) {
  const fileName = basename(filePath).toLowerCase();
  
  if (fileName.includes('hero') || fileName.includes('bg') || fileName.includes('background')) {
    return optimizationSettings.background;
  }
  
  if (filePath.includes('/events/')) {
    return optimizationSettings.events;
  }
  
  if (fileName.includes('elephant') || fileName.includes('tiger') || 
      fileName.includes('lion') || fileName.includes('giraffe') ||
      fileName.includes('panda') || fileName.includes('iguana') ||
      fileName.includes('monkey') || fileName.includes('wolf')) {
    return optimizationSettings.animals;
  }
  
  return optimizationSettings.default;
}

async function* walk(dir) {
  try {
    const files = await readdir(dir);
    for (const file of files) {
      const path = join(dir, file);
      const stats = await stat(path);
      if (stats.isDirectory()) {
        yield* walk(path);
      } else if(/\.webp$/i.test(file)) {
        yield path;
      }
    }
  } catch (error) {
    console.log(`Skipping directory ${dir}: ${error.message}`);
  }
}

async function optimizeWebP(inputPath) {
  try {
    const settings = getOptimizationSettings(inputPath);
    const tempPath = inputPath + '.optimized';
    
    console.log(`\nüì∏ –°–∂–∏–º–∞—é: ${basename(inputPath)}`);
    
    const originalStats = await stat(inputPath);
    const image = sharp(inputPath);
    const metadata = await image.metadata();
    
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π: ${metadata.width}x${metadata.height} (${Math.round(originalStats.size / 1024)}KB)`);
    
    await image
      .resize(settings.maxWidth, settings.maxHeight, {
        fit: 'inside',
        withoutEnlargement: true
      })
      .webp({
        quality: settings.quality,
        effort: 6,
        smartSubsample: true,
        lossless: false
      })
      .toFile(tempPath);
    
    const newStats = await stat(tempPath);
    const saved = originalStats.size - newStats.size;
    const compressionRatio = ((saved / originalStats.size) * 100).toFixed(1);
    
    console.log(`   –°–∂–∞—Ç—ã–π: ${Math.round(newStats.size / 1024)}KB (—Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${compressionRatio}%)`);
    
    // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –º–µ–Ω—å—à–µ
    if (newStats.size < originalStats.size) {
      await rename(tempPath, inputPath);
      console.log(`   ‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω`);
      return {
        original: originalStats.size,
        optimized: newStats.size,
        saved: saved
      };
    } else {
      await unlink(tempPath);
      console.log(`   ‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª –ª—É—á—à–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å`);
      return {
        original: originalStats.size,
        optimized: originalStats.size,
        saved: 0
      };
    }
  } catch (error) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return { original: 0, optimized: 0, saved: 0 };
  }
}

async function main() {
  console.log('üéØ –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  console.log(`üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${publicDir}\n`);
  
  let totalOriginal = 0;
  let totalOptimized = 0;
  let processedCount = 0;
  
  for await (const path of walk(publicDir)) {
    const result = await optimizeWebP(path);
    totalOriginal += result.original;
    totalOptimized += result.optimized;
    processedCount++;
  }
  
  const totalSaved = totalOriginal - totalOptimized;
  const compressionPercentage = totalOriginal > 0 ? ((totalSaved / totalOriginal) * 100).toFixed(1) : 0;
  
  console.log(`\nüéâ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount}`);
  console.log(`   ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${Math.round(totalOriginal / 1024)}KB`);
  console.log(`   ‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${Math.round(totalOptimized / 1024)}KB`);
  console.log(`   ‚Ä¢ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${Math.round(totalSaved / 1024)}KB (${compressionPercentage}%)`);
}

main().catch(console.error); 