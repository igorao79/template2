import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs/promises';
import path from 'path';

const execAsync = promisify(exec);

async function deploy() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ GitHub Pages...');
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    try {
      await fs.rm('out', { recursive: true, force: true });
      await fs.rm('.next', { recursive: true, force: true });
    } catch {}
    
    // –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...');
    await execAsync('npm run build');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    try {
      await fs.access('out');
      console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω');
    } catch {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º .nojekyll –¥–ª—è GitHub Pages
    console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ .nojekyll...');
    await fs.writeFile('out/.nojekyll', '');
    
    // –î–µ–ø–ª–æ–∏–º –Ω–∞–ø—Ä—è–º—É—é –ø–∞–ø–∫—É out (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–π template2)
    console.log('üöÄ –î–µ–ø–ª–æ–π –Ω–∞ GitHub Pages...');
    await execAsync('gh-pages -d out -t');
    
    console.log('‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://igorao79.github.io/template2/');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:', error.message);
    
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ trace, –ø—Ä–æ–±—É–µ–º —Ä—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π
    if (error.message.includes('trace') || error.message.includes('ENOENT')) {
      console.log('üîß –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
      await manualDeploy();
    } else {
      process.exit(1);
    }
  }
}

async function manualDeploy() {
  try {
    console.log('üõ†Ô∏è –†—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π...');
    
    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const tempDir = 'temp-deploy';
    await fs.rm(tempDir, { recursive: true, force: true });
    await fs.mkdir(tempDir, { recursive: true });
    
    // –ö–æ–ø–∏—Ä—É–µ–º public —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–µ–Ω—å
    await fs.cp('public', tempDir, { recursive: true });
    
    // –°–æ–∑–¥–∞–µ–º .nojekyll
    await fs.writeFile(path.join(tempDir, '.nojekyll'), '');
    
    // –î–µ–ø–ª–æ–∏–º
    await execAsync(`gh-pages -d ${tempDir} -t`);
    
    // –û—á–∏—â–∞–µ–º
    await fs.rm(tempDir, { recursive: true, force: true });
    
    console.log('‚úÖ –†—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è:', error);
    process.exit(1);
  }
}

deploy(); 