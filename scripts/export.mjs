import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs/promises';
import path from 'path';

const execAsync = promisify(exec);

async function exportPages() {
  try {
    console.log('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü...');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    try {
      await fs.rm('out', { recursive: true, force: true });
    } catch {}
    
    try {
      await fs.rm('.next', { recursive: true, force: true });
    } catch {}
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
    console.log('üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...');
    try {
      await execAsync('next build');
    } catch (buildError) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 11/11 —Å—Ç—Ä–∞–Ω–∏—Ü)
      if (buildError.stdout && buildError.stdout.includes('Generating static pages (11/11)')) {
        console.log('‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É trace)');
      } else {
        throw buildError;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ .next
    console.log('üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ .next...');
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ .next/static
    const staticSrc = '.next/static';
    const staticDest = 'out/template2/_next/static';
    
    try {
      await fs.mkdir('out/template2/_next', { recursive: true });
      await fs.cp(staticSrc, staticDest, { recursive: true });
      console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã:', error.message);
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª—ã –∏–∑ .next/server/app
    const htmlSrc = '.next/server/app';
    const htmlDest = 'out/template2';
    
    try {
      await copyHtmlFiles(htmlSrc, htmlDest);
      console.log('‚úÖ HTML —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å HTML —Ñ–∞–π–ª—ã:', error.message);
    }
    
    // –°–æ–∑–¥–∞–µ–º index.html –≤ –∫–æ—Ä–Ω–µ template2
    console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    await createIndexHtml();
    
    // –ö–æ–ø–∏—Ä—É–µ–º public —Ñ–∞–π–ª—ã
    console.log('üìÇ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ public —Ñ–∞–π–ª–æ–≤...');
    await fs.cp('public', 'out/template2', { recursive: true });
    
    // –°–æ–∑–¥–∞–µ–º .nojekyll
    await fs.writeFile('out/.nojekyll', '');
    
    console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('üìÅ –§–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ out/');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error.message);
    process.exit(1);
  }
}

async function copyHtmlFiles(src, dest) {
  try {
    const entries = await fs.readdir(src, { withFileTypes: true });
    
    for (const entry of entries) {
      const srcPath = path.join(src, entry.name);
      
      if (entry.isDirectory()) {
        await copyHtmlFiles(srcPath, dest);
      } else if (entry.name === 'index.html') {
        const destPath = path.join(dest, 'index.html');
        await fs.mkdir(path.dirname(destPath), { recursive: true });
        await fs.copyFile(srcPath, destPath);
      }
    }
  } catch (error) {
    console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${src}:`, error.message);
  }
}

async function createIndexHtml() {
  const indexContent = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ó–æ–æ–ø–∞—Ä–∫</title>
    <meta name="description" content="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∑–æ–æ–ø–∞—Ä–∫">
    <link rel="icon" href="/template2/fav.ico">
    <link rel="stylesheet" href="/template2/_next/static/css/app/layout.css">
</head>
<body>
    <div id="__next">
        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
    </div>
    <script>
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        window.location.href = '/template2/';
    </script>
</body>
</html>`;
  
  await fs.writeFile('out/template2/index.html', indexContent);
}

exportPages(); 